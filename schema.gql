type User {
  username: String
  email: String @unique
  resumes: [Resume] @relation
  confirmed: Boolean
  jobTitle: String
  bio: String
  feedback: [Feedback] @relation
}

type Resume {
  user: User
  jobTitle: String
  bio: String
  title: String
  priority: Int
  templateId: String
  primaryColor: String
  backgroundColor: String
  data: String
}

type Feedback {
  user: User
  grade: Int
  text: String
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  users: [User]
  usersByConfirmStatus(confirmed: Boolean!): [User]
  userByEmail(email: String!): User
  resumeByTitle(title: String!): Resume
  feedback: [Feedback]
}

type Mutation {
  cascadeDeleteResume(id: ID!): ID! @resolver(name: "cascadeDeleteResume")
  moveResume(id: ID!, amount: Int!): ID! @resolver(name: "moveResume")

  loginUser(email: String!, password: String!): AuthPayload!
    @resolver(name: "loginUser")
  logoutUser: Boolean! @resolver(name: "logoutUser")
  createUser(email: String!, username: String!, password: String!): User!
    @resolver(name: "createUser")
  updateUserPassword(id: ID!, password: String!): User!
    @resolver(name: "updateUserPassword")
}
